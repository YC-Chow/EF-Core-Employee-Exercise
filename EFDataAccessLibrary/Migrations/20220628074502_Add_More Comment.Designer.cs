// <auto-generated />
using System;
using EFDataAccessLibrary.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFDataAccessLibrary.Migrations
{
    [DbContext(typeof(EmployeeContext))]
    [Migration("20220628074502_Add_More Comment")]
    partial class Add_MoreComment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EFDataAccessLibrary.Models.EmployeeFolder.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasComment("Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World! Hello World!");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MName")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_EmployeeId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_CreatedDate");

                    b.HasIndex("FName")
                        .HasDatabaseName("IX_FName");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("FName"), false);

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.EmployeeFolder.EmployeeAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Address2")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Address3")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_AddressId");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("IX_EmployeeId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("EmployeeId"), false);
                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex("EmployeeId"), 85);

                    b.ToTable("EmployeeAddress");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.EmployeeFolder.EmployeeAddress", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.EmployeeFolder.Employee", "Employee")
                        .WithMany("Addresses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.EmployeeFolder.Employee", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
