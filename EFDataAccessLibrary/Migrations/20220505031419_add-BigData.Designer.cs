// <auto-generated />
using System;
using EFDataAccessLibrary.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFDataAccessLibrary.Migrations
{
    [DbContext(typeof(BlankContext))]
    [Migration("20220505031419_add-BigData")]
    partial class addBigData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFDataAccessLibrary.Models.BigData.BigData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("RandomDateTime")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime>("RandomDateTime2")
                        .HasColumnType("DateTime2");

                    b.Property<decimal>("RandomDecimal")
                        .HasColumnType("Decimal(38,19)");

                    b.Property<decimal>("RandomDecimal2")
                        .HasColumnType("Decimal(38,19)");

                    b.Property<int>("RandomInt")
                        .HasColumnType("int");

                    b.Property<int>("RandomInt2")
                        .HasColumnType("int");

                    b.Property<string>("RandomString")
                        .HasColumnType("VarChar(max)");

                    b.Property<string>("RandomString2")
                        .HasColumnType("VarChar(max)");

                    b.HasKey("Id")
                        .HasName("PK_BigDataId");

                    b.ToTable("BigData");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Country.Citizen", b =>
                {
                    b.Property<int>("CitizenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("VarChar(4)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("VarChar(100)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("VarChar(100)");

                    b.Property<string>("MName")
                        .IsRequired()
                        .HasColumnType("VarChar(100)");

                    b.HasKey("CitizenId")
                        .HasName("PK_CitizenId");

                    b.HasIndex("CountryCode");

                    b.ToTable("Citizen");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Country.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("VarChar(4)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("VarChar(200)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("CountryId")
                        .HasName("PK_CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MName")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_EmployeeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.EmployeeAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Address2")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Address3")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_AddressId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAddress");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Country.Citizen", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.Country.Country", "Country")
                        .WithMany("Citizens")
                        .HasForeignKey("CountryCode")
                        .HasPrincipalKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.EmployeeAddress", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.Employee", "Employee")
                        .WithMany("Addresses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Country.Country", b =>
                {
                    b.Navigation("Citizens");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Employee", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
